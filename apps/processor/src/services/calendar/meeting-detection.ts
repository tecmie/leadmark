import { simpleCompletion } from "../resources/openai/simple";

export interface MeetingRequest {
  isRequested: boolean;
  suggestedDuration?: number; // in minutes
  suggestedTimeframe?: string;
  purpose?: string;
  preferredFormat?: "in-person" | "video" | "phone" | "unspecified";
  urgency?: "low" | "medium" | "high";
}

export interface MeetingConfirmation {
  isConfirming: boolean;
  selectedDateTime?: string;
  confirmedDuration?: number;
  purpose?: string;
  format?: "in-person" | "video" | "phone" | "unspecified";
}

export interface MeetingContext {
  messageText: string;
  messageHistory?: string;
  senderName?: string;
}

/**
 * Analyze message content to detect meeting scheduling requests
 */
export async function detectMeetingRequest(
  context: MeetingContext
): Promise<MeetingRequest> {
  const prompt = `Analyze the following message and conversation history to determine if the sender is requesting to schedule a meeting, call, or appointment.

Current message: "${context.messageText}"

${context.messageHistory ? `Previous conversation:\n${context.messageHistory}` : ""}

Please respond with a JSON object containing:
- isRequested: boolean (true if they want to schedule a meeting/call/appointment)
- suggestedDuration: number in minutes (if mentioned, otherwise default appropriate duration)
- suggestedTimeframe: string (any time preferences mentioned like "next week", "Monday morning", etc.)
- purpose: string (brief description of meeting purpose if mentioned)
- preferredFormat: "in-person" | "video" | "phone" | "unspecified"
- urgency: "low" | "medium" | "high" based on language used

Look for keywords like: meet, meeting, call, appointment, schedule, available, free time, calendar, discuss, chat, talk, etc.

Respond ONLY with valid JSON, no other text.`;

  try {
    const response = await simpleCompletion({
      name: "Meeting Detection AI",
      objective:
        "Analyze messages to detect meeting scheduling requests and extract relevant details.",
      text: prompt,
      attachmentContext: "",
      linksContext: "",
    });

    // Try to parse the JSON response
    const cleanedResponse = response.replace(/```json\n?|\n?```/g, "").trim();
    const meetingRequest: MeetingRequest = JSON.parse(cleanedResponse);

    // Validate the response structure
    if (typeof meetingRequest.isRequested !== "boolean") {
      throw new Error("Invalid response format");
    }

    return meetingRequest;
  } catch (error) {
    console.error("Error detecting meeting request:", error);
    // Return default safe response
    return {
      isRequested: false,
    };
  }
}

/**
 * Generate meeting scheduling response suggestions
 */
export async function generateMeetingResponse(
  meetingRequest: MeetingRequest,
  availableSlots: string,
  senderName: string = "User",
  full_name: string
): Promise<string> {
  if (!meetingRequest.isRequested) {
    return "";
  }

  const prompt = `The customer ${senderName} has requested a meeting with the following details:
${meetingRequest.purpose ? `Purpose: ${meetingRequest.purpose}` : ""}
${meetingRequest.suggestedDuration ? `Duration: ${meetingRequest.suggestedDuration} minutes` : ""}
${meetingRequest.suggestedTimeframe ? `Timeframe: ${meetingRequest.suggestedTimeframe}` : ""}
${meetingRequest.preferredFormat ? `Format: ${meetingRequest.preferredFormat}` : ""}
${meetingRequest.urgency ? `Urgency: ${meetingRequest.urgency}` : ""}

Available time slots:
${availableSlots}

Generate a professional and friendly response that:
1. Acknowledges their meeting request
2. Offers the available time slots
3. Asks them to confirm their preferred time
4. Mentions the meeting format if specified
5. Keeps it concise and professional


Respond in markdown format.

Here are your constraints:
    - DO NOT INCLUDE CODE TAGS LIKE \`\`\` markdown, {}, or similar 
    - DO NOT INCLUDE OR CREATE A SUBJECT FOR THE EMAIL


Remember to sign it with ${full_name}, and add "LeadMark AI Assistant" to show that you are an AI assistant. 
    Eg.
      '''Best regards,
      ${full_name}
      generated by LeadMark AI Assistant'''
`;

  try {
    const response = await simpleCompletion({
      name: "Meeting Scheduler AI",
      objective:
        "Generate professional meeting scheduling responses with available time slots.",
      text: prompt,
      attachmentContext: "",
      linksContext: "",
    });

    return response;
  } catch (error) {
    console.error("Error generating meeting response:", error);
    return `Thank you for your interest in scheduling a meeting. I'd be happy to find a time that works for both of us. Let me check my calendar and get back to you with some available options.`;
  }
}

/**
 * Parse natural language time references
 */
export function parseTimePreferences(timeframe: string): {
  start: Date;
  end: Date;
} {
  const now = new Date();
  const tomorrow = new Date(now);
  tomorrow.setDate(now.getDate() + 1);

  const nextWeek = new Date(now);
  nextWeek.setDate(now.getDate() + 7);

  // Default to next 7 days if no specific timeframe
  let start = tomorrow;
  let end = nextWeek;

  const lowerTimeframe = timeframe.toLowerCase();

  if (lowerTimeframe.includes("today")) {
    start = now;
    end = new Date(now);
    end.setHours(23, 59, 59, 999);
  } else if (lowerTimeframe.includes("tomorrow")) {
    start = tomorrow;
    end = new Date(tomorrow);
    end.setHours(23, 59, 59, 999);
  } else if (lowerTimeframe.includes("next week")) {
    start = nextWeek;
    const endNextWeek = new Date(nextWeek);
    endNextWeek.setDate(nextWeek.getDate() + 7);
    end = endNextWeek;
  } else if (lowerTimeframe.includes("this week")) {
    // Rest of this week
    end = new Date(now);
    // Find next Sunday
    const daysUntilSunday = 7 - now.getDay();
    end.setDate(now.getDate() + daysUntilSunday);
  }

  return { start, end };
}

/**
 * Detect if customer is confirming a specific time slot
 */
export async function detectMeetingConfirmation(
  context: MeetingContext
): Promise<MeetingConfirmation> {
  const prompt = `Analyze the following message and conversation history to determine if the sender is confirming or selecting a specific time slot for a meeting.

Current message: "${context.messageText}"

${context.messageHistory ? `Previous conversation:\n${context.messageHistory}` : ""}

Look for:
- Explicit confirmations like "Yes, I'll take the 2:00 PM slot"
- Time selections like "Monday at 10 AM works for me"
- Phrases like "I confirm", "Let's book", "That time works", "I'll take"
- References to specific dates/times mentioned in previous messages

Please respond with a JSON object containing:
- isConfirming: boolean (true if they are confirming/selecting a specific time)
- selectedDateTime: string (the specific date/time they selected in ISO format if identifiable)
- confirmedDuration: number in minutes (if mentioned)
- purpose: string (meeting purpose if mentioned)
- format: "in-person" | "video" | "phone" | "unspecified"

If they're just expressing general interest without selecting a specific time, set isConfirming to false.

Respond ONLY with valid JSON, no other text.`;

  try {
    const response = await simpleCompletion({
      name: "Meeting Confirmation AI",
      objective:
        "Analyze messages to detect when customers are confirming specific meeting times.",
      text: prompt,
      attachmentContext: "",
      linksContext: "",
    });

    const cleanedResponse = response.replace(/```json\n?|\n?```/g, "").trim();
    const confirmation: MeetingConfirmation = JSON.parse(cleanedResponse);

    if (typeof confirmation.isConfirming !== "boolean") {
      throw new Error("Invalid confirmation response format");
    }

    return confirmation;
  } catch (error) {
    console.error("Error detecting meeting confirmation:", error);
    return {
      isConfirming: false,
    };
  }
}
