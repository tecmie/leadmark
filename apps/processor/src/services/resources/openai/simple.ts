import OpenAI from 'openai';
import { _GPT4_ } from '~/constants';

interface ParsedObjective {
  mock: {
    discussion: Array<{
      dialog: string;
      response: string;
    }>;
  };
  name: {
    model_name: string;
  };
  reit: string[];
  bothinst: {
    role: string;
    task: string;
  };
  time_bound_objectives?: Array<{
    time_bound_objective: string;
    constraint_rules: Array<{
      constraint: string;
      rule: string;
      time_rule: string;
      satisfies_constraint_action: string;
      does_not_satisfy_constraint_action: string;
    }>;
  }>;
}

interface SimpleCompletionData {
  objective: string;
  objectiveParsed?: ParsedObjective;
  name: string;
  full_name?: string;
  text: string;
  attachmentContext: string;
  linksContext: string;
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
export async function simpleCompletion({
  name,
  objective,
  objectiveParsed,
  text,
  attachmentContext,
  linksContext,
  full_name
}: SimpleCompletionData): Promise<string> {
  const context = `
  Attachment Context Specific to this message thread
  ${attachmentContext}

  Links Context:
  ${linksContext}
  `;

  let messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [];

  if (objectiveParsed && full_name) {
    // Build the objectives list properly
    const reitTasks = objectiveParsed.reit
      .map((task) => `- ${task}`)
      .join('\n');

    messages = [
      {
        role: 'system',
        content: `You name is ${objectiveParsed.name.model_name} and you only respond in markdown.
        And always remember, you are responding via email, so you need to format your reply as such.

        Here is your role: ${objectiveParsed.bothinst.role}
        Here is your task: ${objectiveParsed.bothinst.task}
        
        Here are your constraints:
        - DO NOT INCLUDE CODE TAGS LIKE \`\`\` markdown, {}, or similar 

    
    `,
      },
      {
        role: 'user',
        content: `## Are you ready to execute your objectives which are: 
      ${reitTasks} 
      to the best of your knowledge with all your responses in markdown?`,
      },
      {
        role: 'assistant',
        content: 'Yes, I am ready to do all that.',
      },
      {
        role: 'user',
        content: `Great, let's get started.
      Just received this email from ${name}:
      "${text}"
  
      Please write a reply to send to them.
      Remember to sign it with ${full_name}, and add "LeadMark AI Assistant" to show that you are an AI assistant. 
      Eg.
      '''Best regards,
      ${full_name}
      generated by LeadMark AI Assistant'''
      Here's some context for you to work with:
      ${context}`,
      },
    ];
  } else {
    messages = [
      {
        role: 'system',
        content: `You name is ${name} and you only respond in markdown.`,
      },
      {
        role: 'user',
        content: `## Are you ready to execute our objective: ${objective} to the best of your knowledge with all your responses in markdown?`,
      },
      {
        role: 'assistant',
        content: 'Yes, I am ready.',
      },
      {
        role: 'user',
        content: text,
      },
    ];
  }

  const chatCompletion = await openai.chat.completions.create({
    model: _GPT4_,
    messages,
    temperature: 0,
  });

  return chatCompletion.choices[0]?.message?.content || '';
}
